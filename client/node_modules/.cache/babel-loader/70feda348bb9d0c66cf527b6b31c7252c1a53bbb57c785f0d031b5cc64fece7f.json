{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joebr_000.HP\\\\Desktop\\\\University\\\\Final year\\\\Final year project\\\\commerical-web-app\\\\client\\\\src\\\\components\\\\time-select.component.js\";\n//This component is a time selecting widget. You can retrieve the currently selected date using refs to it's state; state.minute & state.hour.\n\n//It has the properties day and month, the TimeSelector component will show the times appropiate for this date this date in\n//correspondence with the opening hours provided in config data, but by default show all times.\n\nimport React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n//Loading configuration\nimport configData from '../config/barber-site.config.json';\n\n//Loading all styling modules\nimport staticFeatures from \"../css-modules/static.module.css\";\nimport modernStyle from \"../css-modules/modern.module.css\";\n\n//Determine website styling module from the config file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst websiteStyle = function () {\n  if (configData.STYLE === \"modern\") {\n    return modernStyle;\n  }\n}();\n\n//Useful functions\nfunction formatIntToTwoDigits(number) {\n  let twoDigit = number.toLocaleString('en-US', {\n    minimumIntegerDigits: 2,\n    useGrouping: false\n  });\n  return twoDigit;\n}\n\n//This is needed data for the time selector\n//---- Hours & minutes (ALL)\nconst allHours = [...Array(25).keys()];\nconst minutes = [0, 15, 30, 45];\nconst daysOfTheWeek = [\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\", \"SUNDAY\"];\nvar currentDateTime = new Date();\nvar currentYear = currentDateTime.getFullYear();\n\n//---- Read opening hours from config file\nconst openHours = function () {\n  function getHoursOpen(open, close) {\n    var openHours = [];\n    for (var hourIndex = open; hourIndex <= close; hourIndex++) {\n      openHours.push(hourIndex);\n    }\n    return openHours;\n  }\n  var openingTimes = [];\n  Object.keys(configData.OPENINGTIMES).forEach(day => {\n    var openClose = {\n      openHour: configData.OPENINGTIMES[day].slice(0, 2),\n      openMinute: configData.OPENINGTIMES[day].slice(3, 5),\n      closeHour: configData.OPENINGTIMES[day].slice(6, 8),\n      closeMinute: configData.OPENINGTIMES[day].slice(9, 11)\n    };\n    openingTimes.push(openClose);\n  });\n  var openHours = [];\n  for (var dayOfTheWeekIndex = 0; dayOfTheWeekIndex < 7; dayOfTheWeekIndex++) {\n    var openingHour = parseInt(openingTimes[dayOfTheWeekIndex].openHour);\n    var closingHour = parseInt(openingTimes[dayOfTheWeekIndex].closeHour);\n    openHours.push(getHoursOpen(openingHour, closingHour));\n  }\n  return openHours;\n}();\nfunction getOpenHoursForDay(day, month, year) {\n  //Calculate based on opening hours in config file\n  const dateObj = new Date(month + \" \" + String(formatIntToTwoDigits(day)) + \",\" + year);\n  const dayOfTheWeekIndex = (dateObj.getDay() + 6) % 7;\n  return openHours[dayOfTheWeekIndex];\n}\n\n//For generating JSX for time select\nfunction generateHourSelectOptionsJSX(hours) {\n  var JSXArray = [];\n  function generateHourJSX(hour) {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: parseInt(hour),\n      children: hour\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 16\n    }, this);\n  }\n  for (var optionIndex = 0; optionIndex < hours.length; optionIndex++) {\n    JSXArray.push(generateHourJSX(formatIntToTwoDigits(hours[optionIndex])));\n  }\n  return JSXArray;\n}\nfunction generateMinuteSelectOptionsJSX(minutes) {\n  var JSXArray = [];\n  function generateMinuteJSX(minute) {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: parseInt(minute),\n      children: minute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 14\n    }, this);\n  }\n  for (var optionIndex = 0; optionIndex < minutes.length; optionIndex++) {\n    JSXArray.push(generateMinuteJSX(formatIntToTwoDigits(minutes[optionIndex])));\n  }\n  return JSXArray;\n}\nexport default class TimeSelector extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const daySelected = this.props.day;\n    const monthSelected = this.props.month;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        children: generateHourSelectOptionsJSX(getOpenHoursForDay(daySelected, monthSelected, currentYear))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","configData","staticFeatures","modernStyle","jsxDEV","_jsxDEV","websiteStyle","STYLE","formatIntToTwoDigits","number","twoDigit","toLocaleString","minimumIntegerDigits","useGrouping","allHours","Array","keys","minutes","daysOfTheWeek","currentDateTime","Date","currentYear","getFullYear","openHours","getHoursOpen","open","close","hourIndex","push","openingTimes","Object","OPENINGTIMES","forEach","day","openClose","openHour","slice","openMinute","closeHour","closeMinute","dayOfTheWeekIndex","openingHour","parseInt","closingHour","getOpenHoursForDay","month","year","dateObj","String","getDay","generateHourSelectOptionsJSX","hours","JSXArray","generateHourJSX","hour","value","children","fileName","_jsxFileName","lineNumber","columnNumber","optionIndex","length","generateMinuteSelectOptionsJSX","generateMinuteJSX","minute","TimeSelector","constructor","props","render","daySelected","monthSelected"],"sources":["C:/Users/joebr_000.HP/Desktop/University/Final year/Final year project/commerical-web-app/client/src/components/time-select.component.js"],"sourcesContent":["//This component is a time selecting widget. You can retrieve the currently selected date using refs to it's state; state.minute & state.hour.\r\n\r\n//It has the properties day and month, the TimeSelector component will show the times appropiate for this date this date in\r\n//correspondence with the opening hours provided in config data, but by default show all times.\r\n\r\nimport React, { Component } from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n//Loading configuration\r\nimport configData from '../config/barber-site.config.json';\r\n\r\n//Loading all styling modules\r\nimport staticFeatures from \"../css-modules/static.module.css\";\r\nimport modernStyle from \"../css-modules/modern.module.css\";\r\n\r\n//Determine website styling module from the config file\r\nconst websiteStyle = (function() {\r\n  if (configData.STYLE === \"modern\"){\r\n    return modernStyle\r\n  }\r\n})();\r\n\r\n//Useful functions\r\nfunction formatIntToTwoDigits(number){\r\n  let twoDigit = number.toLocaleString('en-US', {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: false\r\n  });\r\n\r\n  return twoDigit;\r\n}\r\n\r\n//This is needed data for the time selector\r\n//---- Hours & minutes (ALL)\r\nconst allHours = [...Array(25).keys()]\r\nconst minutes = [0, 15, 30, 45]\r\nconst daysOfTheWeek = [\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\", \"SUNDAY\"]\r\n\r\nvar currentDateTime = new Date();\r\nvar currentYear = currentDateTime.getFullYear();\r\n\r\n//---- Read opening hours from config file\r\nconst openHours = (function() {\r\n    function getHoursOpen(open, close){\r\n      var openHours = [];\r\n\r\n      for (var hourIndex = open; hourIndex <= close; hourIndex++){\r\n        openHours.push(hourIndex);\r\n      }\r\n\r\n      return openHours;\r\n    }\r\n\r\n    var openingTimes = []\r\n\r\n    Object.keys(configData.OPENINGTIMES).forEach(day => {\r\n        var openClose = {\r\n            openHour: configData.OPENINGTIMES[day].slice(0, 2),\r\n            openMinute: configData.OPENINGTIMES[day].slice(3, 5),\r\n            closeHour: configData.OPENINGTIMES[day].slice(6, 8),\r\n            closeMinute: configData.OPENINGTIMES[day].slice(9, 11)\r\n        }\r\n\r\n        openingTimes.push(openClose);\r\n    })\r\n\r\n    var openHours = [];\r\n    \r\n    for (var dayOfTheWeekIndex = 0; dayOfTheWeekIndex < 7; dayOfTheWeekIndex++){\r\n      var openingHour = parseInt(openingTimes[dayOfTheWeekIndex].openHour)\r\n      var closingHour = parseInt(openingTimes[dayOfTheWeekIndex].closeHour)\r\n\r\n      openHours.push(getHoursOpen(openingHour, closingHour))\r\n    }\r\n\r\n    return openHours\r\n})();\r\n\r\nfunction getOpenHoursForDay(day, month, year) {\r\n  //Calculate based on opening hours in config file\r\n  const dateObj = new Date(\r\n    month + \" \" + String(formatIntToTwoDigits(day)) + \",\" + year\r\n  );\r\n\r\n  const dayOfTheWeekIndex = ((dateObj.getDay() + 6) % 7);\r\n\r\n  return openHours[dayOfTheWeekIndex];\r\n}\r\n\r\n\r\n//For generating JSX for time select\r\nfunction generateHourSelectOptionsJSX(hours){\r\n    var JSXArray = [];\r\n\r\n    function generateHourJSX(hour){\r\n        return <option value={parseInt(hour)}>{hour}</option>\r\n    }\r\n\r\n    for (var optionIndex = 0; optionIndex < hours.length; optionIndex++){\r\n      JSXArray.push(generateHourJSX(formatIntToTwoDigits(hours[optionIndex])));\r\n    } \r\n\r\n    return  JSXArray;\r\n}\r\n\r\nfunction generateMinuteSelectOptionsJSX(minutes){\r\n  var JSXArray = [];\r\n\r\n  function generateMinuteJSX(minute){\r\n      return <option value={parseInt(minute)}>{minute}</option>\r\n  }\r\n\r\n  for (var optionIndex = 0; optionIndex < minutes.length; optionIndex++){\r\n    JSXArray.push(generateMinuteJSX(formatIntToTwoDigits(minutes[optionIndex])));\r\n  } \r\n\r\n  return  JSXArray;\r\n}\r\n\r\n\r\nexport default class TimeSelector extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const daySelected = this.props.day;\r\n    const monthSelected = this.props.month;\r\n\r\n    return (\r\n        <div>\r\n            <select>\r\n                {generateHourSelectOptionsJSX(getOpenHoursForDay(daySelected, monthSelected, currentYear))}\r\n            </select>\r\n        </div>\r\n    );\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}