{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joebr_000.HP\\\\Desktop\\\\University\\\\Final year\\\\Final year project\\\\commerical-web-app\\\\client\\\\src\\\\components\\\\time-select.component.js\";\n//This component is a time selecting widget. Upon selecting a date it will run the function passed as the property selectHandler(hourSelected, minuteSelected).\n\n//It has the properties day and month, the TimeSelector component will show the times appropiate for this date this date in\n//correspondence with the opening hours provided in config data, but by default show all times.\n\nimport React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n//Loading configuration\nimport configData from '../config/barber-site.config.json';\n\n//Loading all styling modules\nimport staticFeatures from \"../css-modules/static.module.css\";\nimport modernStyle from \"../css-modules/modern.module.css\";\n\n//Determine website styling module from the config file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst websiteStyle = function () {\n  if (configData.STYLE === \"modern\") {\n    return modernStyle;\n  }\n}();\n\n//Useful functions\nfunction formatIntToTwoDigits(number) {\n  let twoDigit = number.toLocaleString('en-US', {\n    minimumIntegerDigits: 2,\n    useGrouping: false\n  });\n  return twoDigit;\n}\n\n//This is needed data for the time selector\n//---- Hours & minutes (ALL)\nconst minutes = [0, 15, 30, 45];\nvar currentDateTime = new Date();\nvar currentYear = currentDateTime.getFullYear();\n\n//---- Read opening hours from config file\nconst openHours = function () {\n  function getHoursOpen(open, close) {\n    var openHours = [];\n    for (var hourIndex = open; hourIndex <= close; hourIndex++) {\n      openHours.push(hourIndex);\n    }\n    return openHours;\n  }\n  var openingTimes = [];\n  Object.keys(configData.OPENINGTIMES).forEach(day => {\n    var openClose = {\n      openHour: configData.OPENINGTIMES[day].slice(0, 2),\n      openMinute: configData.OPENINGTIMES[day].slice(3, 5),\n      closeHour: configData.OPENINGTIMES[day].slice(6, 8),\n      closeMinute: configData.OPENINGTIMES[day].slice(9, 11)\n    };\n    openingTimes.push(openClose);\n  });\n  var openHours = [];\n  for (var dayOfTheWeekIndex = 0; dayOfTheWeekIndex < 7; dayOfTheWeekIndex++) {\n    var openingHour = parseInt(openingTimes[dayOfTheWeekIndex].openHour);\n    var closingHour = parseInt(openingTimes[dayOfTheWeekIndex].closeHour);\n    openHours.push(getHoursOpen(openingHour, closingHour));\n  }\n  return openHours;\n}();\n\n//---- Current implementation determines using only opening hours from the config file\nfunction getMinutesForHour() {\n  const timesAvailable = minutes;\n  return timesAvailable;\n}\nfunction getAvailableTimes(day, month, year) {\n  //Calculate based on opening hours in config file\n  const dateObj = new Date(month + \" \" + String(formatIntToTwoDigits(day)) + \",\" + year);\n  const dayOfTheWeekIndex = (dateObj.getDay() + 6) % 7;\n  const hoursOpen = openHours[dayOfTheWeekIndex].slice(0, -1);\n  var availabilityAll = [];\n  hoursOpen.forEach(hour => {\n    minutes.forEach(time => {\n      availabilityAll.push([hour, time]);\n    });\n  });\n  console.log(availabilityAll);\n}\n\n//For generating JSX for time select\nfunction generateHourSelectOptionsJSX(hours) {}\nexport default class TimeSelector extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hourSelected: undefined,\n      minuteSelected: undefined\n    };\n    this.onHourChange = this.onHourChange.bind(this);\n    this.onMinuteChange = this.onMinuteChange.bind(this);\n  }\n  onHourChange(selectEvent) {\n    this.setState({\n      hourSelected: selectEvent.target.value\n    });\n    this.props.handleSelect(selectEvent.target.value, this.state.minuteSelected);\n  }\n  onMinuteChange(selectEvent) {\n    this.setState({\n      minuteSelected: selectEvent.target.value\n    });\n    this.props.handleSelect(this.state.hourSelected, selectEvent.target.value);\n  }\n  render() {\n    const daySelected = this.props.day;\n    const monthSelected = this.props.month;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: staticFeatures.timeSelectContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Slot availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: staticFeatures.availableTimesContainer,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: staticFeatures.availableTimeButton,\n          children: \"11.45am\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), getAvailableTimes()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","configData","staticFeatures","modernStyle","jsxDEV","_jsxDEV","websiteStyle","STYLE","formatIntToTwoDigits","number","twoDigit","toLocaleString","minimumIntegerDigits","useGrouping","minutes","currentDateTime","Date","currentYear","getFullYear","openHours","getHoursOpen","open","close","hourIndex","push","openingTimes","Object","keys","OPENINGTIMES","forEach","day","openClose","openHour","slice","openMinute","closeHour","closeMinute","dayOfTheWeekIndex","openingHour","parseInt","closingHour","getMinutesForHour","timesAvailable","getAvailableTimes","month","year","dateObj","String","getDay","hoursOpen","availabilityAll","hour","time","console","log","generateHourSelectOptionsJSX","hours","TimeSelector","constructor","props","state","hourSelected","undefined","minuteSelected","onHourChange","bind","onMinuteChange","selectEvent","setState","target","value","handleSelect","render","daySelected","monthSelected","className","timeSelectContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","availableTimesContainer","availableTimeButton"],"sources":["C:/Users/joebr_000.HP/Desktop/University/Final year/Final year project/commerical-web-app/client/src/components/time-select.component.js"],"sourcesContent":["//This component is a time selecting widget. Upon selecting a date it will run the function passed as the property selectHandler(hourSelected, minuteSelected).\r\n\r\n//It has the properties day and month, the TimeSelector component will show the times appropiate for this date this date in\r\n//correspondence with the opening hours provided in config data, but by default show all times.\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n//Loading configuration\r\nimport configData from '../config/barber-site.config.json';\r\n\r\n//Loading all styling modules\r\nimport staticFeatures from \"../css-modules/static.module.css\";\r\nimport modernStyle from \"../css-modules/modern.module.css\";\r\n\r\n//Determine website styling module from the config file\r\nconst websiteStyle = (function() {\r\n  if (configData.STYLE === \"modern\"){\r\n    return modernStyle\r\n  }\r\n})();\r\n\r\n//Useful functions\r\nfunction formatIntToTwoDigits(number){\r\n  let twoDigit = number.toLocaleString('en-US', {\r\n    minimumIntegerDigits: 2,\r\n    useGrouping: false\r\n  });\r\n\r\n  return twoDigit;\r\n}\r\n\r\n//This is needed data for the time selector\r\n//---- Hours & minutes (ALL)\r\nconst minutes = [0, 15, 30, 45]\r\n\r\nvar currentDateTime = new Date();\r\nvar currentYear = currentDateTime.getFullYear();\r\n\r\n//---- Read opening hours from config file\r\nconst openHours = (function() {\r\n    function getHoursOpen(open, close){\r\n      var openHours = [];\r\n\r\n      for (var hourIndex = open; hourIndex <= close; hourIndex++){\r\n        openHours.push(hourIndex);\r\n      }\r\n\r\n      return openHours;\r\n    }\r\n\r\n    var openingTimes = []\r\n\r\n    Object.keys(configData.OPENINGTIMES).forEach(day => {\r\n        var openClose = {\r\n            openHour: configData.OPENINGTIMES[day].slice(0, 2),\r\n            openMinute: configData.OPENINGTIMES[day].slice(3, 5),\r\n            closeHour: configData.OPENINGTIMES[day].slice(6, 8),\r\n            closeMinute: configData.OPENINGTIMES[day].slice(9, 11)\r\n        }\r\n\r\n        openingTimes.push(openClose);\r\n    })\r\n\r\n    var openHours = [];\r\n    \r\n    for (var dayOfTheWeekIndex = 0; dayOfTheWeekIndex < 7; dayOfTheWeekIndex++){\r\n      var openingHour = parseInt(openingTimes[dayOfTheWeekIndex].openHour)\r\n      var closingHour = parseInt(openingTimes[dayOfTheWeekIndex].closeHour)\r\n\r\n      openHours.push(getHoursOpen(openingHour, closingHour))\r\n    }\r\n\r\n    return openHours\r\n})();\r\n\r\n\r\n//---- Current implementation determines using only opening hours from the config file\r\nfunction getMinutesForHour(){\r\n  const timesAvailable = minutes;\r\n\r\n  return timesAvailable;\r\n}\r\n\r\nfunction getAvailableTimes(day, month, year) {\r\n  //Calculate based on opening hours in config file\r\n  const dateObj = new Date(\r\n    month + \" \" + String(formatIntToTwoDigits(day)) + \",\" + year\r\n  );\r\n\r\n  const dayOfTheWeekIndex = ((dateObj.getDay() + 6) % 7);\r\n\r\n  const hoursOpen = openHours[dayOfTheWeekIndex].slice(0, -1);\r\n\r\n  var availabilityAll = [];\r\n\r\n  hoursOpen.forEach((hour) => {\r\n    minutes.forEach((time) => {\r\n      availabilityAll.push([hour, time]);\r\n    });\r\n  });\r\n\r\n  console.log(availabilityAll);\r\n}\r\n\r\n\r\n//For generating JSX for time select\r\nfunction generateHourSelectOptionsJSX(hours){\r\n}\r\n\r\n\r\nexport default class TimeSelector extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  this.state = {\r\n    hourSelected : undefined,\r\n    minuteSelected : undefined\r\n  };\r\n\r\n  this.onHourChange = this.onHourChange.bind(this);\r\n  this.onMinuteChange = this.onMinuteChange.bind(this);\r\n\r\n  }\r\n\r\n  onHourChange(selectEvent) {\r\n    this.setState({ \r\n      hourSelected: selectEvent.target.value\r\n    });\r\n\r\n    this.props.handleSelect(selectEvent.target.value, this.state.minuteSelected)\r\n  }\r\n\r\n  onMinuteChange(selectEvent) {\r\n    this.setState({\r\n      minuteSelected: selectEvent.target.value\r\n    });\r\n\r\n    this.props.handleSelect(this.state.hourSelected, selectEvent.target.value)\r\n  }\r\n\r\n  render() {\r\n    const daySelected = this.props.day;\r\n    const monthSelected = this.props.month;\r\n\r\n    return (\r\n        <div className={staticFeatures.timeSelectContainer}>\r\n            <div>Slot availability</div>\r\n\r\n            <div className={staticFeatures.availableTimesContainer}>\r\n                <button className={staticFeatures.availableTimeButton}>11.45am</button>\r\n            </div>\r\n\r\n            {getAvailableTimes()}\r\n        </div>\r\n    );\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}